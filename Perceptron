import numpy as np
class Perceptron:
    def __init__(self, input_dim, learning_rate=0.01, epochs=1000):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.weights = np.zeros(input_dim + 1)  

    def _predict(self, X):
      
        linear_output = np.dot(X, self.weights[1:]) + self.weights[0]
        return np.where(linear_output >= 0.0, 1, 0)

    def fit(self, X, y):
        
        for _ in range(self.epochs):
            for xi, target in zip(X, y):
                update = self.learning_rate * (target - self._predict(xi))
                self.weights[1:] += update * xi
                self.weights[0] += update

    def predict(self, X):
        return self._predict(X)

X = np.array([
    [0, 0],
    [0, 1],
    [1, 0],
    [1, 1]
])
y = np.array([0, 0, 0, 1])  


perceptron = Perceptron(input_dim=2, learning_rate=0.1, epochs=10)


perceptron.fit(X, y)


predictions = perceptron.predict(X)


print("Weights:", perceptron.weights)
print("Predictions:", predictions)
